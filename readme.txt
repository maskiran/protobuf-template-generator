This utility generates a text/python template for a protobuf messsage.

Usage:
usage: protogen.py [-h] [-m MODULE] [-g MESSAGE] [-t] [-c]

optional arguments:
  -h, --help            show this help message and exit
  -m MODULE, --module MODULE
                        Module Name (with or without _pb2.py)
  -g MESSAGE, --message MESSAGE
                        Message Name
  -t, --text            Generate text template
  -c, --code            Generate Python code template

Details:

-m MODULE

The module should be importable in a python script. This should be the
<proto>_pb2.py thats generated by the protobuf compiler. The argument
could be given either as path or python module format. The script
replaces slashes (/) with dots (.) and removes the .py extension and
then imports the argument.

e.g insights_interface_pb2.py or insights_interface_pb2

-g MESSAGE
The message for which the template has to be generated. Most often this
is the Args type of message.

-t
Generates a text formatted template. User can change the values or add
as required and use the file in the protobuf

-c
Generates text in python code format. The code can then be copied into
your python script and make change as required.

Examples:

[prompt]$ python protogen.py -m insights_interface_pb2 -g UpdateEntityTypeArg -t
entity_type_info_list {
  entity_type_name: "tmp"
  type_info {
    parent_list: "tmp"
    track_attribute_changes: true
    shard_strategy {
      shard_type: kEntityType
      shard_entity_type_name: "tmp"
    }
  }
}


[prompt]$ python protogen.py -m insights_interface_pb2 -g UpdateEntityTypeArg -c
updateentitytypearg = UpdateEntityTypeArg()
entitytypeinfo = updateentitytypearg.entity_type_info_list.add()
entitytypeinfo.typeinfo.parent_list.extend(['tmp'])
entitytypeinfo.typeinfo.track_attribute_changes = 1
entitytypeinfo.typeinfo.entitytypeshard.shard_type = 1
entitytypeinfo.typeinfo.entitytypeshard.shard_entity_type_name = 'tmp'
entitytypeinfo.entity_type_name = 'tmp'
